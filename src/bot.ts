import 'dotenv/config';
import { Telegraf } from 'telegraf';
import LocalSession from 'telegraf-session-local';
import { io } from '@pm2/io';
import puppeteer from 'puppeteer';

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
import { initCronJobs } from './cron/cron';
import { handleRegComment } from './modules/reg/reg';
import { payments } from './modules/payments/payments';
import { handleTextCommand } from './modules/text/text';
import { handleDocsCommand } from './modules/links/docs/docs';
import { handleHelpCommand } from './modules/help/help';
import { handleOperatorCommand } from './modules/links/oper/oper';
import { tableMetrics } from './modules/metrics/metrics_btn';
import { oplataNotification } from './modules/oplata/oplata';
import { notifyUsers, notifyAllUsers } from './modules/sk_operator/notify';
import { handleStatusCommand } from './bot/status';
import { handleMsgCommand } from './utils/msg/admin';
import { logNewChatMembers, logLeftChatMember } from './utils/log';
import { handleGetGroupInfoCommand } from './modules/test/number_users';
import { runBot } from './bot/run';
import { handleForwardedMessage, whoCommand } from './modules/test/who';
import { createMetric } from './bot/metricPM2';
import { metricsNotificationDirector } from './modules/metrics/director/metrics';
import { formatMetricsMessageMaster } from './modules/metrics/master/metrics';
import { sendMetricsMessagesNach } from './modules/metrics/hachalnik/metrics';
import { handlePhoto } from './modules/test/photo';
import { checkingGroup } from './modules/checkingGroup/checkingGroup';
import { sendLogData } from './api/api';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const BOT_TOKEN: string = process.env.BOT_TOKEN || '';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
const localSession = new LocalSession({ database: 'session_db.json' });
bot.use(localSession.middleware());

// –°–µ—Å—Å–∏–æ–Ω–Ω—ã–π middleware
bot.use((ctx, next) => {
    ctx.session = ctx.session || {
        isAwaitFio: false,
        isAwaitComment: false,
        isUserInitiated: false
    };
    return next();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const SECRET_KEY: string = process.env.SECRET_KEY || '';
const WEB_API: string = process.env.WEB_API || '';

const GRAND_ADMIN: string = process.env.GRAND_ADMIN || '';
const LOG_CHANNEL_ID: string = process.env.LOG_CHANNEL_ID || '';

const DIR_OPLATA: string = process.env.DIR_OPLATA || '';
const DIR_METRIC: string = process.env.DIR_METRIC || '';
const KISELEV: string = process.env.KISELEV || '';

const DIR_TEST_GROUP: string = process.env.DIR_TEST_GROUP || '';
const ADMIN_DB: string = process.env.ADMIN_DB || '';

const OPLATA_REPORT_ACTIVE: boolean = process.env.OPLATA_REPORT_ACTIVE === 'true';
const METRICS_REPORT_ACTIVE: boolean = process.env.METRICS_REPORT_ACTIVE === 'true';

const MODE: string = process.env.NODE_ENV || 'development';
const emoji = {
    x: '‚ùå',
    ok: '‚úÖ',
    error: '‚ùó',
    warning: '‚ö†',
    bot: 'Ô§ñ',
    star: '‚≠ê',
    tech: '‚öô',
    rating_1: 'ü•á',
    rating_2: 'ü•à',
    rating_3: 'ü•â',
    point: '¬∑'
}; // ‚ùå //‚úÖ //‚ùó //‚ö† //ü§ñ //‚≠ê //‚öôÔ∏è // ü•á // ü•à // ü•â // ‚Ä¢ // ¬∑

const stateCounter = {
    bot_update: 0,
    bot_check: 0,

    user_get_all: 0,
    users_get: 0,
    users_get_all_fio: 0,
    users_add: 0,

    comment_get_all: 0,
    comment_update: 0,

    oplata_get_all: 0,
    oplata_update: 0,

    instanceNumber: 0 // –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏
};

// –°–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const instanceNumber = Math.floor(Math.random() * 9000) + 1000;
const currentDateTime = new Date();
stateCounter.instanceNumber = instanceNumber; // –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏

// –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
// –≤–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
io.init({ transactions: true, http: true });

runBot(instanceNumber, currentDateTime);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
bot.on('photo', (ctx) => handlePhoto(ctx));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command(['start', 'reg'], (ctx) => handleRegComment(ctx, (ctx.session.isAwaitFio = true))); // ['start', 'reg']
bot.command('pay', (ctx) => payments(ctx));
bot.command('new_comment', (ctx) => notifyUsers(ctx, (ctx.session.isUserInitiated = true)));
bot.command('new_comment_all', notifyAllUsers);
bot.command('help', handleHelpCommand);
bot.command('oplata', oplataNotification);
bot.command('msg', handleMsgCommand);
bot.command('status', (ctx) => handleStatusCommand(ctx, instanceNumber, currentDateTime));
bot.command('get_group_info', (ctx) => handleGetGroupInfoCommand(ctx));
bot.command('who', (ctx) => whoCommand(ctx));
bot.command(['m', 'metrics'], (ctx) => metricsNotificationDirector(ctx, 1));
bot.command('metrics_director_notification', (ctx) => metricsNotificationDirector(ctx, 0));
bot.command('metrics_nachalnic_notification', () => sendMetricsMessagesNach());
bot.command('metrics_master_notification', () => formatMetricsMessageMaster());
bot.command('docs', (ctx) => handleDocsCommand(ctx));
bot.command('oper', (ctx) => handleOperatorCommand(ctx));

bot.command('list', (ctx) => {
    const searchTerm = ctx.message.text.split(' ')[1];
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (!searchTerm) {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /list');
        return;
    }

    fetch(`${WEB_API}/users/find_list.php?search_term=${searchTerm}`)
      .then((response) => response.json())
      .then((data) => {
          if (data.status === 'OK') {
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
              const users = data.data;
              if (users.length === 0) {
                  ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
              } else {
                  // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 50
                  const chunks = chunkArray(users, 50);

                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                  chunks.forEach((chunk, index) => {
                      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                      let message = `–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—á–∞—Å—Ç—å ${index + 1}):\n`;
                      chunk.forEach((user) => {
                          message += `\n<a href='tg://user?id=${user.user_id}'>${user.fio}</a> ${user.username ? `(@${user.username})` : ''} - ${user.post}`;
                      });

                      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                      ctx.reply(message, { parse_mode: 'HTML' });
                  });
              }
          } else {
              ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞.');
          }
      })
      .catch((error) => {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
          ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      });
});

bot.command('list_test_otk_marh', (ctx) => checkingGroup(ctx));

bot.command('get_website_screenshot', async (ctx) => {
    try {
        const websiteUrl = ctx.message.text.split(' ')[1]; // –ü–æ–ª—É—á–∞–µ–º URL —Å–∞–π—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!websiteUrl) {
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /get_website_screenshot');
            return;
        }

        const browser = await puppeteer.launch(); // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        const page = await browser.newPage(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        await page.goto(websiteUrl); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
        await page.setViewport({ width: 1920, height: 1080 }); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        const screenshot = await page.screenshot({ type: 'png', fullPage: true }); // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await browser.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä

        await ctx.replyWithPhoto({ source: screenshot }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.command('mbth', async (ctx) => tableMetrics(ctx));

bot.command('mjpg', async (ctx) => {
    try {
        const websiteUrl = `${WEB_API}metrics/web.php?key=SecretKeyPFForum23`;

        const browser = await puppeteer.launch(); // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        const page = await browser.newPage(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        await page.goto(websiteUrl); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
        await page.setViewport({ width: 438, height: 667 }); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        console.log('before waiting');
        await delay(4000); // –û–∂–∏–¥–∞–Ω–∏–µ 4 —Å–µ–∫—É–Ω–¥
        console.log('after waiting');
        const screenshot = await page.screenshot({ type: 'png', fullPage: true }); // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await browser.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä

        await ctx.replyWithPhoto({ source: screenshot }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —á–∞—Å—Ç–∏
function chunkArray(array: any[], chunkSize: number): any[][] {
    const result: any[][] = [];
    for (let i = 0; i < array.length; i += chunkSize) {
        result.push(array.slice(i, i + chunkSize));
    }
    return result;
}

function onMaintenance(ctx: any) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
    ctx.reply('‚ùå –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ.');
}

// bot.command('ping_test', pingService);

bot.on('message', (ctx) => handleTextCommand(ctx));
bot.on('text', (ctx) => handleTextCommand(ctx)); // –æ—Å–æ–±–æ –Ω–µ –Ω—É–∂–Ω–∞ –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('new_chat_members', logNewChatMembers);
bot.on('left_chat_member', logLeftChatMember);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().catch(async (err) => {
    console.error('Fatal Error! Error while launching the bot:', err);
    const logMessageToSend = {
        user_id: '',
        text: err.toString(),
        error: 1,
        ok: 0,
        test: process.env.NODE_ENV === 'build' ? 0 : 1
    };
    await sendLogData(logMessageToSend);
    setTimeout(() => bot.launch(), 30000); // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
});

createMetric('bot_check', stateCounter, 'bot_check');
createMetric('user_get_all', stateCounter, 'user_get_all');
createMetric('users_get_all_fio', stateCounter, 'users_get_all_fio');
createMetric('user_add', stateCounter, 'user_add');
createMetric('users_get', stateCounter, 'users_get');
createMetric('comment_get_all', stateCounter, 'comment_get_all');
createMetric('comment_update', stateCounter, 'comment_update');
createMetric('oplata_get_all', stateCounter, 'oplata_get_all');
createMetric('oplata_update', stateCounter, 'oplata_update');
createMetric('instanceNumber', stateCounter, 'instanceNumber');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron-–∑–∞–¥–∞–Ω–∏–π
initCronJobs(currentDateTime, instanceNumber);

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è mjpg)
function delay(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}